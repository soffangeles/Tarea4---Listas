# Programa: Persona.py
# Objetivo: Clase que modela una Persona, se incluyen funciones para fechas
# Autor: Ger
# Fecha: 13-07-2024

from validate_email import validate_email
from datetime import date, datetime


class Persona:
    def __init__(self, *params):
        """
        Constructor que permite crear diferentes objetos Persona
        :param params: Lista variable de parámetros (0, n)
        """
        if len(params) == 0: # Constructor por omisión
            self.__nombre = "Juan"
            self.__apellidos = "Martínez Sánchez"
            self.__nacimiento = date(1990, 7, 23)
            self.__email = "jmartinez@gmail.com"
            self.__celular = "5544898677"
            self.carrera = "Actuaria"
        elif len(params) == 6: # Constructor por parámetros
            self.__nombre = params[0]
            self.__apellidos = params[1]
            self.__nacimiento = params[2]
            self.__email = params[3] \
                if validate_email(params[3]) else "usuario@domino.com"
            self.__celular = params[4]
            self.__carrera = params[5]

    # Agregar métodos GET
    @property
    def nombre(self):
        return self.__nombre

    @property
    def apellidos(self):
        return self.__apellidos

    @property
    def nacimiento(self):
        return self.__nacimiento

    @property
    def email(self):
        return self.__email

    @property
    def celular(self):
        return self.__celular

    @property
    def carrera(self):
        return self.__carrera

    #Métodos SET
    @nombre.setter
    def nombre(self, nombre: str):
        self.__nombre = nombre

    @apellidos.setter
    def apellidos(self, apellidos: str):
        self.__apellidos = apellidos

    @nacimiento.setter
    def nacimiento(self, nacimiento: str):
        self.__nacimiento = nacimiento

    @email.setter
    def email(self, email: str):
        if validate_email(email):
            self.__email = email
        else:
            print("El correo no es válido!\n"
                  "Se definió el correo: usuario@dominio.com")
            self.__email = "usuario@dominio.com"

    @celular.setter
    def celular(self, celular: int):
        self.__celular = celular

    @carrera.setter
    def carrera(self, carrera: str):
        self.__carrera = carrera

    # Métodos calculadores
    def __str__(self):
        """
        Método que permite definir una persona en formato cadena
        :return: La Persona en formato str
        :rtype: str
        """
        return "Persona: {} {} | Nacimiento: {} | Email: {} | Celular: {} | Carrera: {}".format(
            self.__nombre, self.__apellidos, self.__nacimiento.strftime("%d/%m/%Y"), self.__email,
            self.__celular, self.__carrera)

    # Este método se define cuando se desea que los objetos se guarden en un archivo
    def __iter__(self):
        """
        Método que devuelve una representación iterable de un objeto
        :return: La representación en formato Lista de las Personas
        :rtype: iterable
        """
        return iter([self.__nombre, self.__apellidos, self.__nacimiento, self.__email, self.__celular, self.__carrera])

    # Estos métodos se tienen que agregar cuando se trabajan con objetos en los Conjuntos y lograr
    # que sus objetos sean hasheables
    def __llave(self) -> tuple:
        """Método privado que permite definir una llave a través de los atributos del objetos
        :return: Una tupla con los atributos del objeto.
        :rtype: tuple
        """
        return self.__nombre, self.__apellidos, self.__nacimiento, self.__email, self.__celular, self.__carrera

    def __hash__(self) -> int:
        """
        Método que internamente llama a la función hash() para obtener el valor hash del objeto.
        Se utilizan generalmente para una comparación más rápida entre los objetos,
        ya que los valores hash se comparan directamente en lugar de comparar el valor de cada objeto.
        :return: Un valor entero que corresponde al valor hash del objeto
        :rtype: int
        """
        return hash(self.__llave())

    def __eq__(self, otra) -> bool:
        """
        Método que permite definir el criterio de igualdad de dos objetos
        :param otra: La Persona con la que se va a realizar la comparación
        :return: True si las Personas son iguales, False en caso contario
        :rtype: bool
        """
        if isinstance(otra, Persona):
            return self.__llave() == otra.__llave()

#Probar la clase Persona
if __name__ == "__main__":
    per1 = Persona()
    print(per1)
    per2 = Persona()
    print(per2)
    #Utilizando el constructor por parámetros
    nombre = input("Escribe el nombre: ")
    apellidos = input("Escribe los apellidos: ")
    nacimiento = input("Escribe la fecha de nacimiento (dd/mm/aaaa): ")
    #Convetir str a date
    nacimiento = datetime.strptime(nacimiento, "%d/%m/%Y").date()
    email = input("Escribe el correo electrónico: ")
    celular = int(input("Escribe el número celular (número entero): "))
    carrera = input("Escribe la carrera: ")
    per3 = Persona(nombre, apellidos, nacimiento, email, celular, carrera)
    print(per3)
